import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { Providers } from '@/components/providers';
import Script from 'next/script';
import { Client } from '@notionhq/client';
import Navbar from '@/components/navbar';

// Initialize Notion client
const notion = new Client({ auth: process.env.NOTION_API_KEY });
const databaseId = process.env.NOTION_DATABASE_ID ?? '';

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "FinanClub",
  description: "Generated by create next app",
};

// Function to fetch categories from Notion
async function fetchCategories() {
  try {
    const database = await notion.databases.retrieve({ database_id: databaseId });
    const categoryProperty = database.properties.Category;

    if (categoryProperty.type === 'select') {
      return categoryProperty.select.options;
    }
    
    return [];
  } catch (error) {
    console.error('Error fetching categories from Notion:', error);
    return [];
  }
}

// Main layout component
export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Fetch categories
  const categories = await fetchCategories();


  return (
    <html lang="en">
      <head>
        {process.env.NEXT_PUBLIC_ADSENSE_P_ID && (
          <Script
            async
            src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-${process.env.NEXT_PUBLIC_ADSENSE_P_ID}`}
            crossOrigin='anonymous'
            strategy='afterInteractive'
          />
        )}
      </head>
      <body className={inter.className}>
        <Providers
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
            <Navbar categories={categories} githubUrl={process.env.GITHUB} twitterUrl={process.env.TWITTER} />
          <main className='mx-auto max-w-3xl'>
            {children}
          </main>
        </Providers>
      </body>
    </html>
  );
}